{"version":3,"file":"static/js/859.304ee0ab.chunk.js","mappings":"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","sources":["components/HourWeather/HourWeather.styled.jsx","components/HourWeather/HourWeather.jsx","components/MainWeather/MainWeather.styled.jsx","components/MainWeather/MainWeather.jsx","components/SunSet/SunSet.jsx","components/Tomorrow/Tomorrow.styled.jsx","components/Tomorrow/Tomorrow.jsx","services/api-weather.jsx"],"sourcesContent":["import styled from 'styled-components';\nexport const HourWeatherTable = styled.div`\n  margin-top: 30px;\n  table {\n    background-color: #9ed5f8;\n    border-collapse: collapse;\n    border-radius: 20px;\n    font-size: 8px;;\n    @media screen and (min-width: 1200px) {\n      font-size: small;\n    }\n  }\n\n  table th,\n  table td {\n    padding: 10px;\n    /* border: 1px solid #2a2a2a; */\n    text-align: center;\n  }\n`;","import { HourWeatherTable } from './HourWeather.styled';\nexport const HourWeather = ({object}) => {\n  return (\n    <HourWeatherTable>\n      <table>\n        <thead>\n          <tr>\n            <th rowSpan=\"2\"></th>\n          </tr>\n          <tr>\n            {object.hour.map((el, index) => {\n              if (index % 2 !== 0) {\n                return (\n                  <th key={el.time_epoch} day={el.is_day}>\n                    {el.time.substring(11, 16)}\n                    <img\n                      src={el.condition.icon}\n                      alt={el.condition.text}\n                      width={35}\n                    />\n                  </th>\n                );\n              }\n              return null;\n            })}\n          </tr>\n        </thead>\n\n        <tbody>\n          <tr>\n            <td>Вологість</td>\n            {object.hour.map((el, index) => {\n              if (index % 2 !== 0) {\n                return (\n                  <td key={el.time_epoch} day={el.is_day}>\n                    {el.humidity} %\n                  </td>\n                );\n              }\n              return null;\n            })}\n          </tr>\n          <tr>\n            <td>Температура </td>\n            {object.hour.map((el, index) => {\n              if (index % 2 !== 0) {\n                return (\n                  <td key={el.time_epoch} day={el.is_day}>\n                    {Math.round(el.temp_c)} °С\n                  </td>\n                );\n              }\n              return null;\n            })}\n          </tr>\n          <tr>\n            <td>Видимість</td>\n            {object.hour.map((el, index) => {\n              if (index % 2 !== 0) {\n                return (\n                  <td key={el.time_epoch} day={el.is_day}>\n                    {el.vis_km} км\n                  </td>\n                );\n              }\n              return null;\n            })}\n          </tr>\n          <tr>\n            <td>Ймовірність опадів</td>\n            {object.hour.map((el, index) => {\n              if (index % 2 !== 0) {\n                return (\n                  <td key={el.time_epoch} day={el.is_day}>\n                    {el.chance_of_rain || el.chance_of_snow} %\n                  </td>\n                );\n              }\n              return null;\n            })}\n          </tr>\n          <tr>\n            <td>Швидкість вітру</td>\n            {object.hour.map((el, index) => {\n              if (index % 2 !== 0) {\n                return (\n                  <td key={el.time_epoch} day={el.is_day}>\n                    {el.wind_kph} км/г\n                  </td>\n                );\n              }\n              return null;\n            })}\n          </tr>\n        </tbody>\n      </table>\n    </HourWeatherTable>\n  );\n};\n","import styled, { css, keyframes } from 'styled-components';\n\nexport const MainIinfo = styled.div`\n  position: relative;\n  top: 0;\n  right: 520px;\n  z-index: 20;\n  flex: 0 0 auto;\n  color: rgb(255, 255, 255);\n  text-shadow: 1px 1px 2px black;\n  padding: 40px;\n  text-align: center;\n  display: flex;\n  justify-content: center;\n  max-width: 700px;\n  gap: 40px;\n  border-radius: 20px;\n  width: 100%;\n  @media screen and (min-width: 1200px) {\n    gap: 90px;\n    right: 600px;\n  }\n\n  h2 {\n    margin-top: 80px;\n    text-align: center;\n    font-size: 16px;\n    margin-bottom: 20px;\n\n    @media screen and (min-width: 1200px) {\n      margin: 0;\n      font-size: 32px;\n    }\n  }\n\n  p {\n    margin: 0;\n    text-align: left;\n    font-size: x-large;\n  }\n`;\n\nexport const MainIinfoTab = styled.div`\n  table {\n    border-collapse: collapse;\n    font-size: 15px;\n    width: 300px;\n  }\n\n  table th,\n  table td {\n    padding: 5px;\n    text-align: left;\n    border-bottom: 1px solid white;\n  }\n\n  table tr td:nth-child(2n) {\n    text-align: right;\n  }\n`;\n\nexport const sunAnimation = keyframes`\n   0% {\n      transform: rotate(0deg);\n    }\n\n    100% {\n      transform: rotate(360deg);\n    }\n`;\nexport const muvAnimation = keyframes`\n  0% {\n    transform: translatex(-100px);\n  }\n \n  100% {\n    transform: translatex(100px);\n  }\n`;\n\nexport const bitAnimation = keyframes`\n \t0% { \n    transform: scale(1) \n  }\n\n  50% {\n   transform: scale(1.2);\n  }\n   \t0% { \n    transform: scale(1) \n  }\n`;\n\nexport const TomorImg = styled.img`\n  ${({ alt }) => {\n    switch (alt) {\n      case 'Sunny':\n        return css`\n          animation-name: ${sunAnimation};\n          animation-duration: 5s;\n          animation-timing-function: linear;\n          animation-iteration-count: infinite;\n        `;\n      case ('Heavy rain', 'Light freezing rain'):\n        return css`\n          animation-name: ${muvAnimation};\n          animation-duration: 1.5s;\n          animation-timing-function: linear;\n          animation-iteration-count: infinite;\n          animation-direction: alternate-reverse;\n        `;\n      case 'Patchy rain possible':\n        return css`\n          animation-name: ${muvAnimation};\n          animation-duration: 1.5s;\n          animation-timing-function: linear;\n          animation-iteration-count: infinite;\n          animation-direction: alternate-reverse;\n        `;\n      case 'Moderate rain':\n        return css`\n          animation-name: ${muvAnimation};\n          animation-duration: 1.5s;\n          animation-timing-function: linear;\n          animation-iteration-count: infinite;\n          animation-direction: alternate-reverse;\n        `;\n      default:\n        return css`\n          animation-name: ${bitAnimation};\n          animation-duration: 3s;\n          animation-timing-function: linear;\n          animation-iteration-count: infinite;\n        `;\n    }\n  }}\n`;\n","import { format } from 'date-fns';\nimport { uk } from 'date-fns/locale';\nimport { MainIinfo, MainIinfoTab, TomorImg } from './MainWeather.styled';\n\nexport const MainWeather = ({ object}) => {\n  const formattedDateStr = format(new Date(object.date), 'EEEE d MMMM', {\n    locale: uk,\n  });\n  const pressureMb = object.hour.reduce(\n    (acc, el) => acc + el.pressure_mb / 24,\n    0\n  );\n  const fillLike = object.hour.reduce(\n    (acc, el) => acc + el.feelslike_c / 24,\n    0\n  );\n  const clouds = object.hour.reduce((acc, el) => acc + el.cloud / 24, 0);\n  const windSpeed = object.hour.reduce((acc, el) => acc + el.wind_kph / 24, 0);\n\n  return (\n    <MainIinfo>\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n        }}\n      >\n        {' '}\n        <h2> {formattedDateStr}</h2>\n        <div>\n          <TomorImg\n            src={object.day.condition.icon}\n            alt={object.day.condition.text}\n            width={120}\n          />\n        </div>\n      </div>\n\n      <MainIinfoTab>\n        <table>\n          <tbody>\n            <tr>\n              <td>Температура °С</td>\n              <td>{Math.round(object.day.avgtemp_c)}</td>\n            </tr>\n            <tr>\n              <td>Відчувається як °С</td>\n              <td>{Math.round(fillLike)}</td>\n            </tr>\n            <tr>\n              <td>Хмарність %</td>\n              <td>{Math.round(clouds)}</td>\n            </tr>\n            <tr>\n              <td>Вологість %</td>\n              <td>{object.day.avghumidity}</td>\n            </tr>\n            <tr>\n              <td>Тиск мм рт. ст.</td>\n              <td>{(pressureMb * 0.75006).toFixed(0)} </td>\n            </tr>\n            <tr>\n              <td> Макс °С</td>\n              <td>{Math.round(object.day.maxtemp_c)}</td>\n            </tr>\n            <tr>\n              <td> Мін °С</td>\n              <td>{Math.round(object.day.mintemp_c)}</td>\n            </tr>\n            <tr>\n              <td> Індекс УФ</td>\n              <td>{object.day.uv}</td>\n            </tr>\n            <tr>\n              <td> Швидкість вітру км/г</td>\n              <td>{Math.round(windSpeed)} </td>\n            </tr>\n          </tbody>\n        </table>\n      </MainIinfoTab>\n    </MainIinfo>\n  );\n};\n","\nimport { useState } from 'react';\nimport './sunSet.scss';\n\nexport const SunSet = ({ sun, set,children}) => {\n  const [sunriseChecked, setSunriseChecked] = useState(true);\n  const [sunsetChecked, setSunsetChecked] = useState(false);\n\n  const handleSunriseChange = () => {\n    setSunriseChecked(true);\n    setSunsetChecked(false);\n  };\n\n  const handleSunsetChange = () => {\n    setSunriseChecked(false);\n    setSunsetChecked(true);\n  };\n\n  return (\n    <div\n      style={{\n        overflow: 'hidden',\n        borderRadius: '20px',\n        border: '1px solid  #2ca4f4',\n      }}\n    >\n      <input\n        type=\"radio\"\n        name=\"time\"\n        id=\"sunrise\"\n        className=\"input-ani\"\n        // checked\n        checked={sunriseChecked}\n        onChange={handleSunriseChange}\n      />\n      <input\n        type=\"radio\"\n        name=\"time\"\n        id=\"sunset\"\n        className=\"input-ani\"\n        checked={sunsetChecked}\n        onChange={handleSunsetChange}\n      />\n      <div id=\"app\">\n        <div className=\"glow\"></div>\n        <div className=\"sky\"></div>\n        <div className=\"stars\"></div>\n        <div className=\"city\">\n          <div className=\"building\">\n            <div className=\"tower\">\n              <div className=\"windows\"></div>\n            </div>\n            <div className=\"tower\">\n              <div className=\"windows\"></div>\n              <div className=\"ledge\"></div>\n            </div>\n            <div className=\"tower\">\n              <div className=\"windows\"></div>\n            </div>\n          </div>\n          <div className=\"building\">\n            <div className=\"tower\">\n              <div className=\"windows\"></div>\n            </div>\n            <div className=\"tower\">\n              <div className=\"windows\"></div>\n              <div className=\"ledge\"></div>\n            </div>\n            <div className=\"tower\">\n              <div className=\"windows\"></div>\n              <div className=\"ledge\"></div>\n            </div>\n          </div>\n          <div className=\"building\">\n            <div className=\"tower\">\n              <div className=\"windows\"></div>\n            </div>\n            <div className=\"tower\">\n              <div className=\"windows\"></div>\n              <div className=\"ledge\"></div>\n            </div>\n            <div className=\"tower\">\n              <div className=\"windows\"></div>\n            </div>\n          </div>\n        </div>\n        <div className=\"times\">\n          <div className=\"time\" data-sunrise={sun} data-sunset={set}></div>\n        </div>\n        {children}\n        <div className=\"heavens\">\n          <label\n            htmlFor=\"sunrise\"\n            className=\"sunrise\"\n            data-title=\"Схід сонця\"\n          ></label>\n          <label\n            htmlFor=\"sunset\"\n            className=\"sunset\"\n            data-title=\"Захід сонця\"\n          ></label>\n        </div>\n        <div className=\"clouds\"></div>\n      </div>\n    </div>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContainerTomor = styled.div`\n  border: 1px solid #2ca4f4;\n  border-bottom-left-radius: 20px;\n  border-bottom-right-radius: 20px;\n  border-top-right-radius: 20px;\n  padding: 20px;\n  font-size: smaller;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  p {\n    margin: 0;\n  }\n  h1 {\n    margin: 0;\n    font-size: 20px;\n    text-align: center;\n    margin-bottom: 15px;\n    color: ${props => (props.theme === 'dark' ? 'white' : 'black')};\n  }\n`;\n","import { useContext, useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\nimport { queryParams } from 'context/QueryParams';\nimport { weatherByCurr } from 'services/api-weather';\nimport {\n  ContainerTomor,\n  \n} from './Tomorrow.styled';\nimport { SunSet } from 'components/SunSet/SunSet';\nimport { HourWeather } from 'components/HourWeather/HourWeather';\nimport { MainWeather } from 'components/MainWeather/MainWeather';\nimport { themeContext } from 'context/ThemeContext';\n\n const Tomorrow = () => {\n  const [resultApCurr, setResultApCurr] = useState(null);\n  const { query } = useContext(queryParams);\n   const { theme } = useContext(themeContext);\n   \n  useEffect(() => {\n    if (query === '') {\n      return;\n    }\n    weatherByCurr(query, 2).then(res => {\n      console.log(res);\n      setResultApCurr(res);\n    });\n  }, [query]);\n\n  function convertTimeTo24HourFormat(time) {\n    const [hour, minute, meridian] = time.split(/:|\\s/);\n    let hourNum = parseInt(hour);\n    if (meridian === 'PM' && hourNum !== 12) {\n      hourNum += 12;\n    }\n    if (meridian === 'AM' && hourNum === 12) {\n      hourNum = 0;\n    }\n    const formattedHour = hourNum.toString().padStart(2, '0');\n    const formattedMinute = minute.padStart(2, '0');\n    return `${formattedHour}:${formattedMinute}`;\n  }\n\n  if (!resultApCurr) {\n    return;\n  }\n\n  return (\n    <>\n      {query && (\n        <ContainerTomor theme={theme}>\n          <h1>Погода {resultApCurr.location.name} на завтра</h1>\n          <SunSet\n            sun={convertTimeTo24HourFormat(\n              resultApCurr.forecast.forecastday[1].astro.sunrise\n            )}\n            set={convertTimeTo24HourFormat(\n              resultApCurr.forecast.forecastday[1].astro.sunset\n            )}\n          >\n            <MainWeather object={resultApCurr.forecast.forecastday[1]} />\n          </SunSet>\n          <HourWeather object={resultApCurr.forecast.forecastday[1]} />\n        </ContainerTomor>\n      )}\n    </>\n  );\n};\n\nexport default Tomorrow;\n\n// {\n  /* <TomorIinfo>\n            <div\n              style={{\n                display: 'flex',\n                flexDirection: 'column',\n                justifyContent: 'center',\n              }}\n            >\n              <h2> {formattedDateStr}</h2>\n              <div>\n                <TomorImg\n                  src={resultApCurr.forecast.forecastday[1].day.condition.icon}\n                  alt={resultApCurr.forecast.forecastday[1].day.condition.text}\n                  width={120}\n                />\n              </div>\n            </div>\n\n            <TomorTableInfo>\n              <table>\n                <tbody>\n                  <tr>\n                    <td>Температура</td>\n                    <td>\n                      {\n                        Math.round(resultApCurr.forecast.forecastday[1].day\n                          .avgtemp_c)\n                      }{' '}\n                      C\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>Ощущается как</td>\n                    <td>{Math.round(fillLike)} C</td>\n                  </tr>\n                  <tr>\n                    <td>Облачность</td>\n                    <td>{Math.round(clouds)} %</td>\n                  </tr>\n                  <tr>\n                    <td>Влажность</td>\n                    <td>\n                      {resultApCurr.forecast.forecastday[1].day.avghumidity} %\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>Давление</td>\n                    <td>{(pressureMb * 0.75006).toFixed(0)} мм рт. ст.</td>\n                  </tr>\n                  <tr>\n                    <td> Макс t</td>\n                    <td>\n                      {resultApCurr.forecast.forecastday[1].day.maxtemp_c} C\n                    </td>\n                  </tr>\n                  <tr>\n                    <td> Мин t</td>\n                    <td>\n                      {resultApCurr.forecast.forecastday[1].day.mintemp_c} C\n                    </td>\n                  </tr>\n                  <tr>\n                    <td> Индекс УФ</td>\n                    <td>{resultApCurr.forecast.forecastday[1].day.uv}</td>\n                  </tr>\n                  <tr>\n                    <td> Скорость ветра</td>\n                    <td>{Math.round(windSpeed)} км/ч</td>\n                  </tr>\n                  <tr>\n                    <td> Восход </td>\n                    <td>\n                      {convertTimeTo24HourFormat(\n                        resultApCurr.forecast.forecastday[1].astro.sunrise\n                      )}\n                    </td>\n                  </tr>\n                  <tr>\n                    <td> Закат </td>\n                    <td>\n                      {convertTimeTo24HourFormat(\n                        resultApCurr.forecast.forecastday[1].astro.sunset\n                      )}\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </TomorTableInfo>\n          </TomorIinfo>\n          <TomorTable>\n            {' '}\n            <table>\n              <thead>\n                <tr>\n                  <th rowSpan=\"2\"></th>\n                </tr>\n                <tr>\n                  {resultApCurr.forecast.forecastday[1].hour.map(\n                    (el, index) => {\n                      if (index % 2 !== 0) {\n                        return (\n                          <th key={el.time_epoch} day={el.is_day}>\n                            {el.time.substring(11, 16)}\n                            <img\n                              src={el.condition.icon}\n                              alt={el.condition.text}\n                              width={35}\n                            />\n                          </th>\n                        );\n                      }\n                      return null;\n                    }\n                  )}\n                </tr>\n              </thead>\n\n              <tbody>\n                <tr>\n                  <td>Влажность</td>\n                  {resultApCurr.forecast.forecastday[1].hour.map(\n                    (el, index) => {\n                      if (index % 2 !== 0) {\n                        return (\n                          <td key={el.time_epoch} day={el.is_day}>\n                            {el.humidity} %\n                          </td>\n                        );\n                      }\n                      return null;\n                    }\n                  )}\n                </tr>\n                <tr>\n                  <td>Температура</td>\n                  {resultApCurr.forecast.forecastday[1].hour.map(\n                    (el, index) => {\n                      if (index % 2 !== 0) {\n                        return (\n                          <td key={el.time_epoch} day={el.is_day}>\n                            {Math.round(el.temp_c)} C\n                          </td>\n                        );\n                      }\n                      return null;\n                    }\n                  )}\n                </tr>\n                <tr>\n                  <td>Видимость</td>\n                  {resultApCurr.forecast.forecastday[1].hour.map(\n                    (el, index) => {\n                      if (index % 2 !== 0) {\n                        return (\n                          <td key={el.time_epoch} day={el.is_day}>\n                            {el.vis_km} км\n                          </td>\n                        );\n                      }\n                      return null;\n                    }\n                  )}\n                </tr>\n                <tr>\n                  <td>Вероятность осадков</td>\n                  {resultApCurr.forecast.forecastday[1].hour.map(\n                    (el, index) => {\n                      if (index % 2 !== 0) {\n                        return (\n                          <td key={el.time_epoch} day={el.is_day}>\n                            {el.chance_of_rain} %\n                          </td>\n                        );\n                      }\n                      return null;\n                    }\n                  )}\n                </tr>\n                <tr>\n                  <td>Скорость ветра</td>\n                  {resultApCurr.forecast.forecastday[1].hour.map(\n                    (el, index) => {\n                      if (index % 2 !== 0) {\n                        return (\n                          <td key={el.time_epoch} day={el.is_day}>\n                            {el.wind_kph} км/ч\n                          </td>\n                        );\n                      }\n                      return null;\n                    }\n                  )}\n                </tr>\n              </tbody>\n            </table>\n          </TomorTable> */\n// }","import axios from 'axios';\n\n// export const weatherByQuery = async query => {\n//   axios.defaults.baseURL = `https://api.openweathermap.org/data/2.5/`;\n//   const KEY = '155bb1208f9e01f3d36c72fa06cba243';\n//   const response = await axios.get(\n//     `weather?q=${query}&appid=${KEY}&units=metric`\n//   );\n\n//   return response.data;\n// };\n\n// export const weatherBy = async query => {\n//   axios.defaults.baseURL = `http://api.weatherapi.com/v1/`;\n//   const KEY2 = 'e8751ca91012454b968145713232702';\n//   const response = await axios.get(`current.json?key=${KEY2}&q=${query}`);\n\n//   return response.data;\n// };\n\nexport const weatherByCurr = async (query,day) => {\n  axios.defaults.baseURL = `https://api.weatherapi.com/v1/`;\n  const KEY2 = 'e8751ca91012454b968145713232702';\n  const response = await axios.get(\n    `forecast.json?key=${KEY2}&q=${query}&days=${day}`\n  );\n\n  return response.data;\n};\n"],"names":["HourWeatherTable","styled","HourWeather","object","rowSpan","hour","map","el","index","day","is_day","time","substring","src","condition","icon","alt","text","width","time_epoch","humidity","Math","round","temp_c","vis_km","chance_of_rain","chance_of_snow","wind_kph","MainIinfo","MainIinfoTab","sunAnimation","keyframes","muvAnimation","bitAnimation","TomorImg","css","MainWeather","formattedDateStr","format","Date","date","locale","uk","pressureMb","reduce","acc","pressure_mb","fillLike","feelslike_c","clouds","cloud","windSpeed","style","display","flexDirection","avgtemp_c","avghumidity","toFixed","maxtemp_c","mintemp_c","uv","SunSet","sun","set","children","useState","sunriseChecked","setSunriseChecked","sunsetChecked","setSunsetChecked","overflow","borderRadius","border","type","name","id","className","checked","onChange","htmlFor","ContainerTomor","props","theme","resultApCurr","setResultApCurr","query","useContext","queryParams","themeContext","convertTimeTo24HourFormat","split","minute","meridian","hourNum","parseInt","formattedHour","toString","padStart","formattedMinute","useEffect","weatherByCurr","then","res","console","log","location","forecast","forecastday","astro","sunrise","sunset","axios","response","data"],"sourceRoot":""}