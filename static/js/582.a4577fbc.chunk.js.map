{"version":3,"file":"static/js/582.a4577fbc.chunk.js","mappings":"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","sources":["components/Today/Today.styled.jsx","components/Today/Today.jsx","services/api-weather.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ContainerToday = styled.div`\n  border: 1px solid #96b4f5;\n  border-bottom-left-radius: 20px;\n  border-bottom-right-radius: 20px;\n  border-top-right-radius: 20px;\n  padding: 20px;\n  font-size: smaller;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  p {\n    margin: 0;\n  }\n  h1 {\n    margin: 0;\n    font-size: 20px;\n    text-align: center;\n    margin-bottom: 15px;\n  }\n`;\n\nexport const Tomor = styled.div`\n  display: flex;\n  font-size: xx-small;\n  flex-direction: column;\n  width: 100%;\n  gap: 10px;\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  p {\n    text-align: left;\n  }\n`;\n\nexport const TomorItem = styled.div`\n  flex-basis: calc((100% - 110px) / 12);\n  text-align: center;\n  /* border: 1px solid red; */\n  font-size: xx-small;\n\n  background-color: ${props => (props.day === 1 ? 'yellow' : 'gray')};\n  p {\n    text-align: center;\n  }\n  :nth-child(2n) {\n    display: none;\n  }\n`;\nexport const TomorIinfo = styled.div`\n  background-color: #ece7e7c0;\n  padding: 20px;\n  text-align: center;\n  display: flex;\n  justify-content: center;\n  max-width: 700px;\n  gap: 50px;\n  border-radius: 20px;\n  width: 100%;\n  h2 {\n    margin: 0;\n    text-align: center;\n    font-size: 32px;\n    margin-bottom: 20px;\n  }\n  p {\n    margin: 0;\n    text-align: left;\n    font-size: x-large;\n  }\n`;\nexport const TomorTable = styled.div`\n  margin-top: 30px;\n  table {\n    background-color: #ece7e7c0;\n    border-collapse: collapse;\n    border-radius: 20px;\n    font-size: small;\n  }\n\n  table th,\n  table td {\n    padding: 10px;\n    /* border: 1px solid #2a2a2a; */\n    text-align: center;\n  }\n`;\nexport const TomorTableInfo = styled.div`\n  table {\n    border-collapse: collapse;\n    font-size: small;\n  }\n\n  table th,\n  table td {\n    padding: 10px;\n    /* border: 1px solid #2a2a2a; */\n    text-align: left;\n    border-radius: 5px;\n  }\n\n  table tr td:nth-child(2n) {\n    background-color: #96b4f5;\n    border: 5px solid #ece7e7c0;\n    text-align: center;\n  }\n`;\n","import { useContext, useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\nimport { queryParams } from 'context/QueryParams';\nimport { weatherByCurr } from 'services/api-weather';\nimport {\n  ContainerToday,\n  TomorIinfo,\n  TomorTable,\n  TomorTableInfo,\n} from './Today.styled';\nimport { format } from 'date-fns';\nimport { ru } from 'date-fns/locale';\n\n const Today = () => {\n  const [resultApCurr, setResultApCurr] = useState(null);\n  const { query } = useContext(queryParams);\n\n  useEffect(() => {\n    if (query === '') {\n      return;\n    }\n    weatherByCurr(query, 1).then(res => {\n      console.log(res);\n      setResultApCurr(res);\n    });\n  }, [query]);\n\n  function convertTimeTo24HourFormat(time) {\n    // Разделяем строку на отдельные части: часы, минуты и меридиан\n    const [hour, minute, meridian] = time.split(/:|\\s/);\n\n    // Преобразуем часы в числовое значение\n    let hourNum = parseInt(hour);\n\n    // Если меридиан - PM и часы не равны 12, добавляем 12 к часам\n    if (meridian === 'PM' && hourNum !== 12) {\n      hourNum += 12;\n    }\n\n    // Если меридиан - AM и часы равны 12, устанавливаем часы в 0\n    if (meridian === 'AM' && hourNum === 12) {\n      hourNum = 0;\n    }\n\n    // Форматируем часы и минуты в двухзначный формат\n    const formattedHour = hourNum.toString().padStart(2, '0');\n    const formattedMinute = minute.padStart(2, '0');\n\n    // Возвращаем строку времени в 24-часовом формате\n    return `${formattedHour}:${formattedMinute}`;\n  }\n  if (!resultApCurr) {\n    return;\n  }\n  const formattedDateStr = format(\n    new Date(resultApCurr.forecast.forecastday[0].date),\n    'EEEE d MMMM',\n    { locale: ru }\n  );\n  return (\n    <>\n      {query && (\n        <ContainerToday>\n          <h1>Погода {resultApCurr.location.name} сегодня</h1>\n          <TomorIinfo>\n            <div\n              style={{\n                display: 'flex',\n                flexDirection: 'column',\n                justifyContent: 'center',\n              }}\n            >\n              {' '}\n              <h2> {formattedDateStr}</h2>\n              <div>\n                <img\n                  src={resultApCurr.current.condition.icon}\n                  alt={resultApCurr.current.condition.text}\n                  width={120}\n                />\n              </div>\n            </div>\n\n            <TomorTableInfo>\n              <table>\n                <tbody>\n                  <tr>\n                    <td>Температура</td>\n                    <td>{resultApCurr.current.temp_c} C</td>\n                  </tr>\n                  <tr>\n                    <td>Ощущается как</td>\n                    <td>{resultApCurr.current.feelslike_c} C</td>\n                  </tr>\n                  <tr>\n                    <td>Облачность</td>\n                    <td>{resultApCurr.current.cloud}%</td>\n                  </tr>\n                  <tr>\n                    <td>Влажность</td>\n                    <td>{resultApCurr.current.humidity}%</td>\n                  </tr>\n                  <tr>\n                    <td>Давление</td>\n                    <td>\n                      {(resultApCurr.current.pressure_mb * 0.75006).toFixed(0)}{' '}\n                      мм рт. ст.\n                    </td>\n                  </tr>\n                  <tr>\n                    <td> Макс t</td>\n                    <td>\n                      {resultApCurr.forecast.forecastday[0].day.maxtemp_c} C\n                    </td>\n                  </tr>\n                  <tr>\n                    <td> Мин t</td>\n                    <td>\n                      {resultApCurr.forecast.forecastday[0].day.mintemp_c} C\n                    </td>\n                  </tr>\n                  <tr>\n                    <td> Индекс УФ</td>\n                    <td>{resultApCurr.forecast.forecastday[0].day.uv}</td>\n                  </tr>\n                  <tr>\n                    <td> Скорость ветра</td>\n                    <td>{resultApCurr.current.wind_kph} км/ч</td>\n                  </tr>\n                  <tr>\n                    <td> Восход </td>\n                    <td>\n                      {convertTimeTo24HourFormat(\n                        resultApCurr.forecast.forecastday[0].astro.sunrise\n                      )}\n                    </td>\n                  </tr>\n                  <tr>\n                    <td> Закат </td>\n                    <td>\n                      {convertTimeTo24HourFormat(\n                        resultApCurr.forecast.forecastday[0].astro.sunset\n                      )}\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </TomorTableInfo>\n          </TomorIinfo>\n          <TomorTable>\n            {' '}\n            <table>\n              <thead>\n                <tr>\n                  <th rowSpan=\"2\"></th>\n                </tr>\n                <tr>\n                  {resultApCurr.forecast.forecastday[0].hour.map(\n                    (el, index) => {\n                      if (index % 2 !== 0) {\n                        return (\n                          <th key={el.time_epoch} day={el.is_day}>\n                            {el.time.substring(11, 16)}\n                            <img\n                              src={el.condition.icon}\n                              alt={el.condition.text}\n                              width={35}\n                            />\n                          </th>\n                        );\n                      }\n                      return null;\n                    }\n                  )}\n                </tr>\n              </thead>\n\n              <tbody>\n                <tr>\n                  <td>Влажность</td>\n                  {resultApCurr.forecast.forecastday[0].hour.map(\n                    (el, index) => {\n                      if (index % 2 !== 0) {\n                        return (\n                          <td key={el.time_epoch} day={el.is_day}>\n                            {el.humidity} %\n                          </td>\n                        );\n                      }\n                      return null;\n                    }\n                  )}\n                </tr>\n                <tr>\n                  <td>Температура</td>\n                  {resultApCurr.forecast.forecastday[0].hour.map(\n                    (el, index) => {\n                      if (index % 2 !== 0) {\n                        return (\n                          <td key={el.time_epoch} day={el.is_day}>\n                            {Math.round(el.temp_c)} C\n                          </td>\n                        );\n                      }\n                      return null;\n                    }\n                  )}\n                </tr>\n                <tr>\n                  <td>Видимость</td>\n                  {resultApCurr.forecast.forecastday[0].hour.map(\n                    (el, index) => {\n                      if (index % 2 !== 0) {\n                        return (\n                          <td key={el.time_epoch} day={el.is_day}>\n                            {el.vis_km} км\n                          </td>\n                        );\n                      }\n                      return null;\n                    }\n                  )}\n                </tr>\n                <tr>\n                  <td>Вероятность осадков</td>\n                  {resultApCurr.forecast.forecastday[0].hour.map(\n                    (el, index) => {\n                      if (index % 2 !== 0) {\n                        return (\n                          <td key={el.time_epoch} day={el.is_day}>\n                            {el.chance_of_rain} %\n                          </td>\n                        );\n                      }\n                      return null;\n                    }\n                  )}\n                </tr>\n                <tr>\n                  <td>Скорость ветра</td>\n                  {resultApCurr.forecast.forecastday[0].hour.map(\n                    (el, index) => {\n                      if (index % 2 !== 0) {\n                        return (\n                          <td key={el.time_epoch} day={el.is_day}>\n                            {el.wind_kph} км/ч\n                          </td>\n                        );\n                      }\n                      return null;\n                    }\n                  )}\n                </tr>\n              </tbody>\n            </table>\n          </TomorTable>\n        </ContainerToday>\n      )}\n    </>\n  );\n};\n\n\nexport default Today;","import axios from 'axios';\n\n// export const weatherByQuery = async query => {\n//   axios.defaults.baseURL = `https://api.openweathermap.org/data/2.5/`;\n//   const KEY = '155bb1208f9e01f3d36c72fa06cba243';\n//   const response = await axios.get(\n//     `weather?q=${query}&appid=${KEY}&units=metric`\n//   );\n\n//   return response.data;\n// };\n\n// export const weatherBy = async query => {\n//   axios.defaults.baseURL = `http://api.weatherapi.com/v1/`;\n//   const KEY2 = 'e8751ca91012454b968145713232702';\n//   const response = await axios.get(`current.json?key=${KEY2}&q=${query}`);\n\n//   return response.data;\n// };\n\nexport const weatherByCurr = async (query,day) => {\n  axios.defaults.baseURL = `https://api.weatherapi.com/v1/`;\n  const KEY2 = 'e8751ca91012454b968145713232702';\n  const response = await axios.get(\n    `forecast.json?key=${KEY2}&q=${query}&days=${day}`\n  );\n\n  return response.data;\n};\n"],"names":["ContainerToday","styled","TomorIinfo","props","day","TomorTable","TomorTableInfo","useState","resultApCurr","setResultApCurr","query","useContext","queryParams","convertTimeTo24HourFormat","time","split","hour","minute","meridian","hourNum","parseInt","formattedHour","toString","padStart","formattedMinute","useEffect","weatherByCurr","then","res","console","log","formattedDateStr","format","Date","forecast","forecastday","date","locale","ru","location","name","style","display","flexDirection","justifyContent","src","current","condition","icon","alt","text","width","temp_c","feelslike_c","cloud","humidity","pressure_mb","toFixed","maxtemp_c","mintemp_c","uv","wind_kph","astro","sunrise","sunset","rowSpan","map","el","index","is_day","substring","time_epoch","Math","round","vis_km","chance_of_rain","axios","response","data"],"sourceRoot":""}