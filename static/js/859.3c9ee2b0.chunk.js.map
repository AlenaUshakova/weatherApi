{"version":3,"file":"static/js/859.3c9ee2b0.chunk.js","mappings":"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","sources":["components/Tomorrow/Tomorrow.styled.jsx","components/Tomorrow/Tomorrow.jsx","services/api-weather.jsx"],"sourcesContent":["import styled, { css, keyframes } from 'styled-components';\n\nexport const ContainerTomor = styled.div`\n  border: 1px solid #96b4f5;\n  border-bottom-left-radius: 20px;\n  border-bottom-right-radius: 20px;\n  border-top-right-radius: 20px;\n  padding: 20px;\n  font-size: smaller;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  p {\n    margin: 0;\n  }\n  h1 {\n    margin: 0;\n    font-size: 20px;\n    text-align: center;\n    margin-bottom: 15px;\n  }\n`;\n\nexport const Tomor = styled.div`\n  display: flex;\n  font-size: xx-small;\n  flex-direction: column;\n  width: 100%;\n  gap: 10px;\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  p {\n    text-align: left;\n  }\n`;\n\nexport const TomorItem = styled.div`\n  flex-basis: calc((100% - 110px) / 12);\n  text-align: center;\n  /* border: 1px solid red; */\n  font-size: xx-small;\n\n  background-color: ${props => (props.day === 1 ? 'yellow' : 'gray')};\n  p {\n    text-align: center;\n  }\n  :nth-child(2n) {\n    display: none;\n  }\n`;\nexport const TomorIinfo = styled.div`\n  background-color: #ece7e7c0;\n  padding: 20px;\n  text-align: center;\n  display: flex;\n  justify-content: center;\n  max-width: 700px;\n  gap: 50px;\n  border-radius: 20px;\n  width: 100%;\n  h2 {\n    margin: 0;\n    margin-bottom:20px;\n    text-align: center;\n    font-size: 32px;\n  }\n  p {\n    margin: 0;\n    text-align: left;\n    font-size: x-large;\n  }\n`;\n\nexport const sunAnimation = keyframes`\n   0% {\n      transform: rotate(0deg);\n    }\n\n    100% {\n      transform: rotate(360deg);\n    }\n`;\nexport const muvAnimation = keyframes`\n  0% {\n    transform: translatex(-100px);\n  }\n \n  100% {\n    transform: translatex(100px);\n  }\n`;\n\nexport const bitAnimation = keyframes`\n \t0% { \n    transform: scale(1) \n  }\n\n  50% {\n   transform: scale(1.2);\n  }\n   \t0% { \n    transform: scale(1) \n  }\n`;\n\nexport const TomorImg = styled.img`\n\n  ${({ alt }) => {\n    switch (alt) {\n      case 'Sunny':\n        return css`\n          animation-name: ${sunAnimation};\n          animation-duration: 5s;\n          animation-timing-function: linear;\n          animation-iteration-count: infinite;\n        `;\n      case 'Heavy rain':\n        return css`\n          animation-name: ${muvAnimation};\n          animation-duration: 1.5s;\n          animation-timing-function: linear;\n          animation-iteration-count: infinite;\n          animation-direction: alternate-reverse;\n        `;\n      case 'Patchy rain possible':\n        return css`\n          animation-name: ${muvAnimation};\n          animation-duration: 1.5s;\n          animation-timing-function: linear;\n          animation-iteration-count: infinite;\n          animation-direction: alternate-reverse;\n        `;\n      default:\n        return css`\n          animation-name: ${bitAnimation};\n          animation-duration: 3s;\n          animation-timing-function: linear;\n          animation-iteration-count: infinite;\n        `;\n    }\n  }}\n`;\n\nexport const TomorTable = styled.div`\n  margin-top: 30px;\n  table {\n    background-color: #ece7e7c0;\n    border-collapse: collapse;\n    border-radius: 20px;\n    font-size: small;\n  }\n\n  table th,\n  table td {\n    padding: 10px;\n    /* border: 1px solid #2a2a2a; */\n    text-align: center;\n  }\n`;\nexport const TomorTableInfo = styled.div`\n  table {\n    border-collapse: collapse;\n    font-size: small;\n  }\n\n  table th,\n  table td {\n    padding: 10px;\n    /* border: 1px solid #2a2a2a; */\n    text-align: left;\n    border-radius: 5px;\n  }\n\n  table tr td:nth-child(2n) {\n    background-color: #96b4f5;\n    border: 5px solid #ece7e7c0;\n    text-align: center;\n  }\n`;\n","import { useContext, useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\nimport { queryParams } from 'context/QueryParams';\nimport { weatherByCurr } from 'services/api-weather';\nimport { format } from 'date-fns';\nimport { ru } from 'date-fns/locale';\nimport {\n  ContainerTomor,\n  TomorIinfo,\n  TomorTableInfo,\n  TomorTable,\n  TomorImg,\n} from './Tomorrow.styled';\n\n const Tomorrow = () => {\n  const [resultApCurr, setResultApCurr] = useState(null);\n  const { query } = useContext(queryParams);\n\n  useEffect(() => {\n    if (query === '') {\n      return;\n    }\n    weatherByCurr(query, 2).then(res => {\n      console.log(res);\n      setResultApCurr(res);\n    });\n  }, [query]);\n\n  function convertTimeTo24HourFormat(time) {\n    const [hour, minute, meridian] = time.split(/:|\\s/);\n    let hourNum = parseInt(hour);\n    if (meridian === 'PM' && hourNum !== 12) {\n      hourNum += 12;\n    }\n    if (meridian === 'AM' && hourNum === 12) {\n      hourNum = 0;\n    }\n    const formattedHour = hourNum.toString().padStart(2, '0');\n    const formattedMinute = minute.padStart(2, '0');\n    return `${formattedHour}:${formattedMinute}`;\n  }\n\n  if (!resultApCurr) {\n    return;\n  }\n\n  const formattedDateStr = format(\n    new Date(resultApCurr.forecast.forecastday[1].date),\n    'EEEE d MMMM',\n    { locale: ru }\n  );\n\n  const pressureMb = resultApCurr.forecast.forecastday[1].hour.reduce(\n    (acc, el) => acc + el.pressure_mb / 24,\n    0\n  );\n  const fillLike = resultApCurr.forecast.forecastday[1].hour.reduce(\n    (acc, el) => acc + el.feelslike_c / 24,\n    0\n  );\n  const clouds = resultApCurr.forecast.forecastday[1].hour.reduce(\n    (acc, el) => acc + el.cloud / 24,\n    0\n  );\n  const windSpeed = resultApCurr.forecast.forecastday[1].hour.reduce(\n    (acc, el) => acc + el.wind_kph / 24,\n    0\n  );\n\n  return (\n    <>\n      {query && (\n        <ContainerTomor>\n          <h1>Погода {resultApCurr.location.name} на завтра</h1>\n          <TomorIinfo>\n            <div\n              style={{\n                display: 'flex',\n                flexDirection: 'column',\n                justifyContent: 'center',\n              }}\n            >\n              <h2> {formattedDateStr}</h2>\n              <div>\n                <TomorImg\n                  src={resultApCurr.forecast.forecastday[1].day.condition.icon}\n                  alt={resultApCurr.forecast.forecastday[1].day.condition.text}\n                  width={120}\n                />\n              </div>\n            </div>\n\n            <TomorTableInfo>\n              <table>\n                <tbody>\n                  <tr>\n                    <td>Температура</td>\n                    <td>\n                      {\n                        Math.round(resultApCurr.forecast.forecastday[1].day\n                          .avgtemp_c)\n                      }{' '}\n                      C\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>Ощущается как</td>\n                    <td>{Math.round(fillLike)} C</td>\n                  </tr>\n                  <tr>\n                    <td>Облачность</td>\n                    <td>{Math.round(clouds)} %</td>\n                  </tr>\n                  <tr>\n                    <td>Влажность</td>\n                    <td>\n                      {resultApCurr.forecast.forecastday[1].day.avghumidity} %\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>Давление</td>\n                    <td>{(pressureMb * 0.75006).toFixed(0)} мм рт. ст.</td>\n                  </tr>\n                  <tr>\n                    <td> Макс t</td>\n                    <td>\n                      {resultApCurr.forecast.forecastday[1].day.maxtemp_c} C\n                    </td>\n                  </tr>\n                  <tr>\n                    <td> Мин t</td>\n                    <td>\n                      {resultApCurr.forecast.forecastday[1].day.mintemp_c} C\n                    </td>\n                  </tr>\n                  <tr>\n                    <td> Индекс УФ</td>\n                    <td>{resultApCurr.forecast.forecastday[1].day.uv}</td>\n                  </tr>\n                  <tr>\n                    <td> Скорость ветра</td>\n                    <td>{Math.round(windSpeed)} км/ч</td>\n                  </tr>\n                  <tr>\n                    <td> Восход </td>\n                    <td>\n                      {convertTimeTo24HourFormat(\n                        resultApCurr.forecast.forecastday[1].astro.sunrise\n                      )}\n                    </td>\n                  </tr>\n                  <tr>\n                    <td> Закат </td>\n                    <td>\n                      {convertTimeTo24HourFormat(\n                        resultApCurr.forecast.forecastday[1].astro.sunset\n                      )}\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </TomorTableInfo>\n          </TomorIinfo>\n          <TomorTable>\n            {' '}\n            <table>\n              <thead>\n                <tr>\n                  <th rowSpan=\"2\"></th>\n                </tr>\n                <tr>\n                  {resultApCurr.forecast.forecastday[1].hour.map(\n                    (el, index) => {\n                      if (index % 2 !== 0) {\n                        return (\n                          <th key={el.time_epoch} day={el.is_day}>\n                            {el.time.substring(11, 16)}\n                            <img\n                              src={el.condition.icon}\n                              alt={el.condition.text}\n                              width={35}\n                            />\n                          </th>\n                        );\n                      }\n                      return null;\n                    }\n                  )}\n                </tr>\n              </thead>\n\n              <tbody>\n                <tr>\n                  <td>Влажность</td>\n                  {resultApCurr.forecast.forecastday[1].hour.map(\n                    (el, index) => {\n                      if (index % 2 !== 0) {\n                        return (\n                          <td key={el.time_epoch} day={el.is_day}>\n                            {el.humidity} %\n                          </td>\n                        );\n                      }\n                      return null;\n                    }\n                  )}\n                </tr>\n                <tr>\n                  <td>Температура</td>\n                  {resultApCurr.forecast.forecastday[1].hour.map(\n                    (el, index) => {\n                      if (index % 2 !== 0) {\n                        return (\n                          <td key={el.time_epoch} day={el.is_day}>\n                            {Math.round(el.temp_c)} C\n                          </td>\n                        );\n                      }\n                      return null;\n                    }\n                  )}\n                </tr>\n                <tr>\n                  <td>Видимость</td>\n                  {resultApCurr.forecast.forecastday[1].hour.map(\n                    (el, index) => {\n                      if (index % 2 !== 0) {\n                        return (\n                          <td key={el.time_epoch} day={el.is_day}>\n                            {el.vis_km} км\n                          </td>\n                        );\n                      }\n                      return null;\n                    }\n                  )}\n                </tr>\n                <tr>\n                  <td>Вероятность осадков</td>\n                  {resultApCurr.forecast.forecastday[1].hour.map(\n                    (el, index) => {\n                      if (index % 2 !== 0) {\n                        return (\n                          <td key={el.time_epoch} day={el.is_day}>\n                            {el.chance_of_rain} %\n                          </td>\n                        );\n                      }\n                      return null;\n                    }\n                  )}\n                </tr>\n                <tr>\n                  <td>Скорость ветра</td>\n                  {resultApCurr.forecast.forecastday[1].hour.map(\n                    (el, index) => {\n                      if (index % 2 !== 0) {\n                        return (\n                          <td key={el.time_epoch} day={el.is_day}>\n                            {el.wind_kph} км/ч\n                          </td>\n                        );\n                      }\n                      return null;\n                    }\n                  )}\n                </tr>\n              </tbody>\n            </table>\n          </TomorTable>\n        </ContainerTomor>\n      )}\n    </>\n  );\n};\n\nexport default Tomorrow;","import axios from 'axios';\n\n// export const weatherByQuery = async query => {\n//   axios.defaults.baseURL = `https://api.openweathermap.org/data/2.5/`;\n//   const KEY = '155bb1208f9e01f3d36c72fa06cba243';\n//   const response = await axios.get(\n//     `weather?q=${query}&appid=${KEY}&units=metric`\n//   );\n\n//   return response.data;\n// };\n\n// export const weatherBy = async query => {\n//   axios.defaults.baseURL = `http://api.weatherapi.com/v1/`;\n//   const KEY2 = 'e8751ca91012454b968145713232702';\n//   const response = await axios.get(`current.json?key=${KEY2}&q=${query}`);\n\n//   return response.data;\n// };\n\nexport const weatherByCurr = async (query,day) => {\n  axios.defaults.baseURL = `https://api.weatherapi.com/v1/`;\n  const KEY2 = 'e8751ca91012454b968145713232702';\n  const response = await axios.get(\n    `forecast.json?key=${KEY2}&q=${query}&days=${day}`\n  );\n\n  return response.data;\n};\n"],"names":["ContainerTomor","styled","TomorIinfo","props","day","sunAnimation","keyframes","muvAnimation","bitAnimation","TomorImg","alt","css","TomorTable","TomorTableInfo","useState","resultApCurr","setResultApCurr","query","useContext","queryParams","convertTimeTo24HourFormat","time","split","hour","minute","meridian","hourNum","parseInt","formattedHour","toString","padStart","formattedMinute","useEffect","weatherByCurr","then","res","console","log","formattedDateStr","format","Date","forecast","forecastday","date","locale","ru","pressureMb","reduce","acc","el","pressure_mb","fillLike","feelslike_c","clouds","cloud","windSpeed","wind_kph","location","name","style","display","flexDirection","justifyContent","src","condition","icon","text","width","Math","round","avgtemp_c","avghumidity","toFixed","maxtemp_c","mintemp_c","uv","astro","sunrise","sunset","rowSpan","map","index","is_day","substring","time_epoch","humidity","temp_c","vis_km","chance_of_rain","axios","response","data"],"sourceRoot":""}